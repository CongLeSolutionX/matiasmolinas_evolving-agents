[
  {
    "id": "18b952a9-0a64-4b20-9073-1de9e637273a",
    "name": "DocumentAnalyzer",
    "record_type": "TOOL",
    "domain": "document_processing",
    "description": "Tool that analyzes documents and identifies their type and structure",
    "code_snippet": "\nfrom typing import Dict, Any\nfrom pydantic import BaseModel, Field\n\nfrom beeai_framework.context import RunContext\nfrom beeai_framework.emitter.emitter import Emitter\nfrom beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions\n\nclass DocumentAnalyzerInput(BaseModel):\n    text: str = Field(description=\"Document text to analyze\")\n\nclass DocumentAnalyzer(Tool[DocumentAnalyzerInput, ToolRunOptions, StringToolOutput]):\n    \"\"\"Tool that analyzes documents and identifies their type and structure.\"\"\"\n    name = \"DocumentAnalyzer\"\n    description = \"Analyzes document content to determine its type and key characteristics\"\n    input_schema = DocumentAnalyzerInput\n\n    def _create_emitter(self) -> Emitter:\n        return Emitter.root().child(\n            namespace=[\"tool\", \"document\", \"analyzer\"],\n            creator=self,\n        )\n    \n    async def _run(self, input: DocumentAnalyzerInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:\n        \"\"\"Analyze a document to identify its type based on content patterns.\"\"\"\n        document_text = input.text.lower()\n        \n        # Define document types\n        document_types = {\n            \"invoice\": [\"invoice\", \"bill\", \"payment\", \"due date\", \"total due\"],\n            \"email\": [\"from:\", \"to:\", \"subject:\", \"reply-to:\", \"cc:\"],\n            \"report\": [\"report\", \"findings\", \"analysis\", \"conclusion\", \"summary\"],\n            \"ticket\": [\"ticket\", \"issue\", \"support\", \"customer\", \"request\"]\n        }\n        \n        # Determine document type\n        doc_type = \"unknown\"\n        confidence = 0.0\n        \n        for dtype, keywords in document_types.items():\n            matches = sum(1 for keyword in keywords if keyword in document_text)\n            type_confidence = matches / len(keywords)\n            \n            if type_confidence > confidence:\n                confidence = type_confidence\n                doc_type = dtype\n        \n        result = {\n            \"document_type\": doc_type,\n            \"confidence\": confidence,\n            \"language\": \"english\",  # Simplified language detection\n            \"length\": len(document_text),\n            \"key_terms\": []  # We could extract key terms\n        }\n        \n        import json\n        return StringToolOutput(json.dumps(result, indent=2))\n        ",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-18T20:58:23.319572",
    "last_updated": "2025-03-18T20:58:23.319585",
    "tags": [
      "document",
      "analysis",
      "classification"
    ],
    "metadata": {}
  },
  {
    "id": "a043ccae-25ca-4795-9e8c-e58dcd4404f8",
    "name": "TextCategorizer",
    "record_type": "AGENT",
    "domain": "text_processing",
    "description": "Agent that categorizes text into predefined categories",
    "code_snippet": "\nfrom typing import List, Dict, Any\nimport re\n\nfrom beeai_framework.agents.react import ReActAgent\nfrom beeai_framework.agents.types import AgentMeta\nfrom beeai_framework.memory import TokenMemory\nfrom beeai_framework.backend.chat import ChatModel\nfrom beeai_framework.tools.tool import Tool\n\nclass TextCategorizerInitializer:\n    \"\"\"\n    Agent that categorizes text into predefined categories.\n    This agent can identify the main topic, sentiment, and urgency of text inputs.\n    \"\"\"\n    \n    @staticmethod\n    def create_agent(llm: ChatModel, tools: List[Tool] = None) -> ReActAgent:\n        # Define which tools the agent will use\n        if tools is None:\n            tools = []\n        \n        # Create agent metadata\n        meta = AgentMeta(\n            name=\"TextCategorizer\",\n            description=(\n                \"I am a text categorization agent that can classify text into different categories. \"\n                \"I can identify the main topic, sentiment, and urgency level of any text input.\"\n            ),\n            tools=tools\n        )\n        \n        # Create the agent with proper memory\n        agent = ReActAgent(\n            llm=llm,\n            tools=tools,\n            memory=TokenMemory(llm),\n            meta=meta\n        )\n        \n        return agent\n        ",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-18T20:58:23.321274",
    "last_updated": "2025-03-18T20:58:23.321285",
    "tags": [
      "text",
      "categorization",
      "classification"
    ],
    "metadata": {}
  }
]