[
  {
    "id": "9b104fe7-7107-46c5-b463-59600429b9d5",
    "name": "OpenAIInvoiceProcessor",
    "record_type": "AGENT",
    "domain": "document_processing",
    "description": "An OpenAI agent specialized in processing invoice documents. This agent can extract structured data from invoices, verify calculations, identify key information like vendor, dates, totals, and line items. It follows governance rules for financial document handling.",
    "code_snippet": "\nfrom agents import Agent, Runner\nfrom agents.model_settings import ModelSettings\n\n# Create an OpenAI Agent for invoice processing\nagent = Agent(\n    name=\"InvoiceProcessor\",\n    instructions=\"\"\"\nYou are an expert invoice processing agent specialized in financial document analysis.\nExtract all important information from invoices including:\n- Invoice number\n- Date\n- Vendor information\n- Line items (description, quantity, price)\n- Subtotal, taxes, and total\n- Payment terms\n\nVerify that calculations are correct.\nFlag any suspicious or unusual patterns.\nStructure your output clearly and follow all governance rules for financial documents.\n\"\"\",\n    model=\"gpt-4o\",\n    model_settings=ModelSettings(\n        temperature=0.3  # Lower temperature for more precise outputs\n    )\n)\n\n# Helper function to process invoices\nasync def process_invoice(invoice_text):\n    result = await Runner.run(agent, input=invoice_text)\n    return result.final_output\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-15T18:07:32.198051",
    "last_updated": "2025-03-15T18:07:32.198057",
    "tags": [
      "openai",
      "invoice",
      "document",
      "financial"
    ],
    "metadata": {
      "framework": "openai-agents",
      "model": "gpt-4o",
      "model_settings": {
        "temperature": 0.3
      },
      "guardrails_enabled": true
    }
  },
  {
    "id": "ef390cf1-f1ce-4377-b1c6-2a8b23c4cc1a",
    "name": "OpenAIDocumentParser",
    "record_type": "TOOL",
    "domain": "document_processing",
    "description": "An OpenAI-compatible tool that extracts structured data from document text",
    "code_snippet": "\nfrom agents import function_tool\nfrom agents.run_context import RunContextWrapper\n\n@function_tool\nasync def parse_document(context: RunContextWrapper, document_text: str) -> str:\n    \"\"\"\n    Extract structured information from a document text.\n    \n    Args:\n        context: The run context\n        document_text: The document text to parse\n        \n    Returns:\n        Structured data extracted from the document in JSON format\n    \"\"\"\n    document_text = document_text.strip()\n    \n    # Identify document type\n    document_type = \"unknown\"\n    if \"invoice\" in document_text.lower():\n        document_type = \"invoice\"\n    elif \"patient\" in document_text.lower() or \"medical\" in document_text.lower():\n        document_type = \"medical_record\"\n    \n    # Extract common fields\n    import re\n    \n    # Extract dates (YYYY-MM-DD)\n    dates = re.findall(r'\\d{4}-\\d{2}-\\d{2}', document_text)\n    \n    # Build basic structured data\n    result = {\n        \"document_type\": document_type,\n        \"dates\": dates,\n        \"text_length\": len(document_text),\n        \"extracted_data\": {}\n    }\n    \n    # For invoices, extract specific fields\n    if document_type == \"invoice\":\n        # Extract invoice number\n        invoice_match = re.search(r'INVOICE #(\\d+)', document_text)\n        if invoice_match:\n            result[\"extracted_data\"][\"invoice_number\"] = invoice_match.group(1)\n            \n        # Extract vendor\n        vendor_match = re.search(r'Vendor: ([^\\n]+)', document_text)\n        if vendor_match:\n            result[\"extracted_data\"][\"vendor\"] = vendor_match.group(1).strip()\n            \n        # Extract total\n        total_match = re.search(r'Total Due: \\$(\\d+,?\\d*\\.\\d+)', document_text)\n        if total_match:\n            result[\"extracted_data\"][\"total\"] = total_match.group(1)\n    \n    import json\n    return json.dumps(result, indent=2)\n",
    "version": "1.0.0",
    "usage_count": 0,
    "success_count": 0,
    "fail_count": 0,
    "status": "active",
    "created_at": "2025-03-15T18:07:32.198662",
    "last_updated": "2025-03-15T18:07:32.198666",
    "tags": [
      "openai",
      "tool",
      "parser",
      "extraction"
    ],
    "metadata": {
      "framework": "openai-agents",
      "integration_method": "function_tool"
    }
  }
]