from typing import Dict, Any
from pydantic import BaseModel, Field

from beeai_framework.context import RunContext
from beeai_framework.emitter.emitter import Emitter
from beeai_framework.tools.tool import StringToolOutput, Tool, ToolRunOptions

class WeatherToolInput(BaseModel):
    location: str = Field(description="Location to get weather information for (city, country)")
    days: int = Field(description="Number of days for forecast (1-7)", default=1, ge=1, le=7)

class WeatherTool(Tool[WeatherToolInput, ToolRunOptions, StringToolOutput]):
    """
    Retrieves weather information for a specified location.
    """
    name = "WeatherTool"
    description = "Get current weather and forecast information for locations worldwide"
    input_schema = WeatherToolInput

    def _create_emitter(self) -> Emitter:
        return Emitter.root().child(
            namespace=["tool", "weather"],
            creator=self,
        )
    
    async def _run(self, input: WeatherToolInput, options: ToolRunOptions | None, context: RunContext) -> StringToolOutput:
        try:
            # In a real implementation, you would call a weather API here
            location = input.location
            days = input.days
            
            # Mock response for demonstration
            weather_data = {
                "location": location,
                "current": {
                    "temperature": 22,
                    "condition": "Sunny",
                    "humidity": 60,
                    "wind_speed": 5
                },
                "forecast": [
                    {"day": i+1, "condition": "Sunny", "max_temp": 24, "min_temp": 18}
                    for i in range(days)
                ]
            }
            
            # Return formatted response
            import json
            return StringToolOutput(json.dumps(weather_data, indent=2))
            
        except Exception as e:
            return StringToolOutput(f"Error retrieving weather information: {str(e)}")