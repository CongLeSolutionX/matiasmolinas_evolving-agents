records:
  - name: "MedicalDiagnosisTool"
    type: "TOOL"
    domain: "medical"
    description: "Tool that analyzes patient symptoms to determine likelihood of various conditions"
    version: "1.0.0"
    tags: ["medical", "diagnosis"]
    code: |
      """
      # MEDICAL_DISCLAIMER: This tool is for informational purposes only and not a substitute for professional medical advice.
      # Always consult with qualified healthcare providers.
      
      A general medical diagnosis tool that analyzes patient symptoms and returns potential conditions
      with likelihood estimates.
      
      This tool follows HIPAA compliance guidelines and medical best practices.
      """
      
      def analyze_symptoms(input):
          """
          Analyze patient symptoms and return possible diagnoses.
          
          Args:
              input: Dictionary containing patient symptoms and optionally age, gender, and medical history
              
          Returns:
              Dictionary with potential diagnoses and likelihood estimates
          """
          symptoms = input.get("symptoms", [])
          if not symptoms:
              return {"error": "No symptoms provided"}
              
          # This would normally use a medical knowledge base or model
          # For now, we'll just return a placeholder response
          return {
              "potential_diagnoses": [
                  {"condition": "Common Cold", "likelihood": "Medium"},
                  {"condition": "Flu", "likelihood": "Medium-Low"},
                  {"condition": "Allergic Reaction", "likelihood": "Low"}
              ],
              "disclaimer": "This is a preliminary assessment only. Please consult a medical professional."
          }
          
      # Entry point for the tool
      result = analyze_symptoms(input)

  - name: "MedicalResearchTool"
    type: "TOOL"
    domain: "medical"
    description: "Tool that researches latest medical treatments and research for specific conditions"
    version: "1.0.0"
    tags: ["medical", "research"]
    code: |
      """
      # MEDICAL_DISCLAIMER: This tool is for informational purposes only and not a substitute for professional medical advice.
      # Always consult with qualified healthcare providers.
      
      A medical research tool that finds the latest treatments and research for specific medical conditions.
      
      This tool follows HIPAA compliance guidelines and medical best practices.
      """
      
      def research_treatments(input):
          """
          Research treatments for a specific medical condition.
          
          Args:
              input: Dictionary containing the condition to research
              
          Returns:
              Dictionary with treatment information
          """
          condition = input.get("condition", "")
          if not condition:
              return {"error": "No condition specified"}
              
          # This would normally perform a search or query a database
          # For now, we'll just return a placeholder response
          return {
              "condition": condition,
              "treatments": [
                  {"name": "Standard Treatment 1", "type": "Medication", "effectiveness": "High"},
                  {"name": "Standard Treatment 2", "type": "Therapy", "effectiveness": "Medium"},
                  {"name": "Experimental Treatment", "type": "Clinical Trial", "effectiveness": "Unknown"}
              ],
              "disclaimer": "Treatment information is for educational purposes only. Consult a healthcare professional for medical advice."
          }
          
      # Entry point for the tool
      result = research_treatments(input)

  - name: "MedicalAgent"
    type: "AGENT"
    domain: "medical"
    description: "A medical assistant agent that can help with diagnosis and treatment information"
    version: "1.0.0"
    tags: ["medical", "agent"]
    code: |
      """
      # MEDICAL_DISCLAIMER: This output is not a substitute for professional medical advice.
      # Always consult with qualified healthcare providers.
      # For informational purposes only.
      
      A medical assistant agent that can help with diagnosis and treatment information.
      
      This agent follows HIPAA compliance guidelines and medical best practices.
      """
      
      from beeai_framework.agents.bee.agent import BeeAgent
      from beeai_framework.agents.types import AgentMeta
      
      class MedicalAssistantAgent(BeeAgent):
          """
          A specialized medical assistant agent that can analyze symptoms and provide medical information.
          
          This agent should always:
          1. Include medical disclaimers
          2. Avoid making definitive diagnoses
          3. Suggest consulting healthcare professionals
          4. Maintain patient confidentiality
          """
          
          def __init__(self, llm, tools, memory):
              """Initialize the medical assistant agent."""
              meta = AgentMeta(
                  name="Medical Assistant",
                  description="A medical assistant that can help with medical questions while maintaining HIPAA compliance.",
                  tools=tools
              )
              super().__init__(llm=llm, tools=tools, memory=memory, meta=meta)